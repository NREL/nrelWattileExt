name:testEnvironmentSetup
doc:
  Setup script to import test environment database records, functions, and point history into the current SkySpark project. Expects to find the following files in 'io':
  
  - 'example_funcs.trio'
  - 'folio_records.trio'
  - 'folio_his.zinc'
  
  These files are available in the [intelligentcampus-model-deploy]`https://github.com/NREL/intelligentcampus-model-deploy` repo.
  
  The single **opts** argument accepts the following control options:
  
  - 'resetProject': Marker; reset the project before import
  
  If 'resetProject' is present (set), then this setup function will:
  
  1. Trash all existing 'weatherStation', 'site', 'equip', 'point', and 'task' records from the current project
  2. Empty the trash
  3. Overwrite any existing 'example*' functions found in 'example_funcs.trio'.
  
  **Warning:** there is no recovery of any existing records after using the 'resetProject' option. Use with care!
func
src:
  (opts:{}) => do
    // Default options
    opts = {}.merge(opts)
  
    // Clear existing records (if applicable)
    if (opts.has("resetProject")) do
      // Existing recs
      recsToTrash: readAll(weatherStation or site or equip or point or task)
      
      if (not recsToTrash.isEmpty) do
        // Trash recs
        recsToTrash.recTrash

        // Empty trash
        folioEmptyTrash()
      end
    end
  
    // Import Folio records
    recs: ioReadTrio(`io/folio_records.trio`)
      .toRecList
      .map(rec => diff(null, rec, {add}))
      .commit
    
    // Helper function: create new or overwrite existing example functions
    funcDiff: (rec) => do
      existing: read(func and name==rec->name, false)
      if (existing != null and opts.has("resetProject")) do
        return diff(existing, rec)
      else do
        return diff(null, rec, {add})
      end
    end
    
    // Import example functions
    funcs: ioReadTrio(`io/example_funcs.trio`)
      .toRecList
      .map(funcDiff)
      .commit
    
    // Read point history
    data: ioReadZinc(`io/folio_his.zinc`)
  
    // Data columns (minus timestamp)
    columns: data.colNames.remove(0) // 'ts' is column 0
  
    // Write point history by point
    columns.each() cn => do
      // Point to write
      point: readById(data.col(cn).meta->id)
  
      // Data to write
      pointData: data
        .keepCols(["ts", cn])
        .hisFindAll((v, t) => v != null)
  
      // Write history
      hisWrite(pointData, point)
    end
  end