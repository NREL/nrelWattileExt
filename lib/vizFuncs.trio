name:wattileViewPredictionHistory
doc:
  Visualize Wattile 'model' prediction history for 'span'. If available, history from the model's target point is also shown. The target point is resolved via the model's `wattileTargetRef` or can be specified by the user via 'target'.
  
  Options
  -------
  
  Appearance can be modified by control options passed via 'opts':
  
  - 'interval': Time interval for `hisRollupAuto()` (Default = none)
  - 'lineColor': Target history line color (Default = "#34495e")
  - 'lineWidth': Target history line (stroke) width (Default = 1.5)
  - 'predictionGradient': List of colors used to create the prediction shading (Default = OrRd from [Color Brewer]`https://colorbrewer2.org/`)
  - 'predictionWidth': Prediction history line (stroke) width (Default = 0.5)
  
  The first color in 'predictionGradient' corresponds to the 0th percentile prediction and the last color corresponds to the 50th percentile (median) prediction. The gradient is interpolated in reverse for the 50th to 100th percentile.
func
overridable
src:
  (model, span, target:null, opts:{}) => do
    // Default options
    opts = {
      lineColor: "#34495e",
      lineWidth: 1.5,
      predictionGradient: ["#fef0d9", "#fdcc8a", "#fc8d59", "#e34a33", "#b30000"],
      predictionWidth: 0.5,
    }.merge(opts)
    
    // Default gradiant is 5-class OrRd from Color Brewer, https://colorbrewer2.org/
    
    // Get model
    model = model.toRec
    
    // Get time span
    span = span.toSpan
    
    // Check interval option
    if (opts.has("interval") and not opts->interval.isNumber) do
      throw "Invalid 'interval' option; must be a number."
    end
    
    // Get target point
    targetPoint: if (target != null) do
      target.toRec
    else if (model.has("wattileTargetRef")) do
      wattileResolveRec(model->wattileTargetRef)
    else do
      null
    end
    
    // Get prediction points
    predictionPoints: xq()
      .xqReadAll(point and wattilePoint and prediction and wattileModelRef==model.toRecId)
      .xqExecute
      .sort("wattileQuantile")
    
    // Read history
    targetHis: xq().xqReadByIds(targetPoint.toRecIdList).xqHisRead(span, {-limit}).xqExecute()
    predictionHis: xq().xqReadByIds(predictionPoints.toRecIdList).xqHisRead(span, {-limit}).xqExecute()
    
    // Target chart properties
    targetHis = targetHis.addColMeta("v0", {color:opts->lineColor, strokeWidth:opts->lineWidth})
    
    // Prediction chart color range
    predictionColors: opts->predictionGradient
    
    // Prediction chart properties
    predictionHis.cols.each() col => do
      // Column meta
      colMeta: col.meta
      
      // Skip ts
      if (col.name == "ts") return null
      
      // Quantile of this prediction
      q: colMeta->wattileQuantile
      
      // Select color
      if (q == 0.5) do
        color: predictionColors.last
      else if (q < 0.5) do
        color: vizInterpolateRgb(predictionColors, 2*q)
      else if (q > 0.5) do
        color: vizInterpolateRgb(predictionColors, 2*(1 - q))
      end
      
      // Custom opacity in area charts is currently unsupported; see: https://skyfoundry.com/forum/topic/5164.
      
      // Set chart area mode
      if (q == 0.5) do
        chartAreaMode: null
      else if (q < 0.5) do
        chartAreaMode: "nextSeries"
      else if (q > 0.5) do
        chartAreaMode: "prevSeries"
      end
      
      // Merge chart properties
      colMeta = colMeta.merge({
        color: color,
        strokeWidth: opts->predictionWidth,
        chartAreaMode: chartAreaMode
      })
      
      // Set col meta
      predictionHis = predictionHis.setColMeta(col.name, colMeta)
    end
    
    // Combine and return
    hisJoin([predictionHis, targetHis])
      .addMeta({
        title: "Wattile: Prediction History",
        subtitle: model.dis + " | " + format(span),
        chartLegendNoSort
      })
      .hisRollupAuto(opts["interval"])
  end
---
name:wattileViewPredictionQuantiles
doc:
  Visualize the goodness of fit of a Wattile 'model' during 'span'. The target is resolved via the model's `wattileTargetRef` or can be specified by the user via 'target'.
  
  The output of this function is a grid intended for viewing as a scatterplot:
  
  - Each plot point '(q, r)' represents one quantile predicted by the Wattile model
  - The X-axis value 'q' is the expected (predicted) quantile
  - The Y-axis value 'r' is the actual (observed) quantile
  
  The result is similar to the [quantile-quantile plot]`https://en.wikipedia.org/wiki/Q%E2%80%93Q_plot` (QQ plot) used to compare probability distributions.
  
  Details
  -------
  
  To generate the plot, the function:
  
  1. Reads the target's history and the model prediction history for 'span'
  2. Interpolates the history grid
  3. For each predicted quantile, calculate the fraction of target history values that are less than or equal to the prediction history values; this is the observed quantile
  4. Record the observed ('q') vs. predicted ('r') quantile as an output point on the plot.
  
  Only the quantiles associated with the available prediction points (via the `wattileQuantile` tag) are included in the analysis.
  
  Interpretation
  --------------
  
  For each plot point '(q, r)':
  
  - If 'r = q', the model accurately predicted the target values for quantile 'q' within 'span'
  - If 'r > q', the model overpredicted the target values for quantile 'q' within 'span'
  - If 'r < q', the model underpredicted the target values for quantile 'q' within 'span'
  
  Ideally, all points on the plot should lie on a 45Â° diagonal line (slope 1, intercept 0). This line is plotted in red for reference.
  
  **Caution!** This diagnostic plot only shows whether, overall, there is a bias in the predictions for specific quantiles. It does not provide information about how well the predictions trends match the target as it changes with time or with respect to the predictor variables.
func
overridable
src:
  (model, span, target:null) => do
    // Plot parameters
    pointColor: "#34495e"
    parityLineWidth: 0.5
    parityLineColor: "red"
  
    // Get model
    model = model.toRec
  
    // Get time span
    span = span.toSpan
    
    // Get target point
    targetPoint: if (target != null) do
      target.toRec
    else if (model.has("wattileTargetRef")) do
      wattileResolveRec(model->wattileTargetRef)
    else do
      throw "Target was not specified and model does not have 'wattileTargetRef' tag."
    end
  
    // Get prediction points
    predictionPoints: xq()
      .xqReadAll(point and wattilePoint and prediction and wattileQuantile and wattileModelRef==model.toRecId)
      .xqExecute
      .sort("wattileQuantile")
    
    // Read target history
    targetHis: xq().xqReadByIds(targetPoint.toRecIdList).xqHisRead(span, {-limit}).xqExecute()
    
    // Calculate observed vs. predicted quantiles from target vs. prediction history   
    observations: predictionPoints.toRecList.map() p => do
      // Read prediction history
      predictionHis: xq().xqReadByIds(p.toRecIdList).xqHisRead(span, {-limit}).xqExecute()
      
      // Combine and interpolate
      hisGrid: hisJoin([
          targetHis.renameCol("v0", "target"),
          predictionHis.renameCol("v0", "prediction")
        ])
        .hisInterpolate
        .hisClip
        .findAll(row => row.hasAll(["target", "prediction"]))
      
      // Total values
      n: hisGrid.size
      
      // Number of values less than or equal to predicted quantile
      m: hisGrid.findAll(row => row->target <= row->prediction).size
      
      // Return X-value = predicted quantile, Y-value = observed quantile
      {q:p->wattileQuantile, r:(m/n)}
    end
    
    // Quantiles
    quantiles: predictionPoints.colToList("wattileQuantile")
    
    // Output grid
    observations
      .toGrid
      .addRows([{q:0, ref:0}, {q:1, ref:1}])
      .addRows(quantiles.map() q => {q:q, ref:q})
      .sort("q")
      .addMeta({view:"chart", title:"Wattile: Observed vs. Predicted Quantiles", subtitle:model.dis + " | " + format(span)})
      .addColMeta("q", {dis:"Predicted Quantile", chartMin:0, chartMax:1})
      .addColMeta("r", {dis:"Observed Quantile", chartType:"scatter", color:pointColor, chartGroup:"A", chartMin:0, chartMax:1})
      .addColMeta("ref", {dis:"Ideal Relationship", chartType:"line", color:parityLineColor, strokeWidth:parityLineWidth, chartGroup:"A"})
  end
