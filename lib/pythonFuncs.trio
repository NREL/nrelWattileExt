name:wattilePythonInit
func
overridable
src:
  // Python session initialization callback
  (session) => do
    // Import required Python libraries and functions
    session
      .pyExec("import hxpy")
      .pyExec("import json")
      .pyExec("import pathlib")
      .pyExec("import numpy")
      .pyExec("import pandas")
      .pyExec("import xarray")
      .pyExec("from wattile.models import AlfaModel, BravoModel")
      .pyExec("from wattile.buildings_processing import prep_for_rnn")
      .pyExec("from wattile.entry_point import create_input_dataframe, run_model")
  end
---
name:wattilePythonModelPredict
func
overridable
src:
  (session, model, span) => do
    // Get predictors
    predictors: model->predictors
    
    // Prediction time span start/end
    spanStart: span.toSpan.start
    spanEnd: span.toSpan.end
    
    // Prediction units: from model, fallback to target
    if (model.has("unit")) do
      predUnit: model->unit
    else if (model.has("targetRef")) do
      predUnit: readById(model->targetRef)["unit"]
    else do
      predUnit: null
    end
    
    // Load model config
    modelConfig: ioReadJson(model->uri + "configs.json")
    
    // Verify model configuration
    if (modelConfig->learning_algorithm->use_case != "prediction") do
      throw "Model " + model.dis + " is not configured for prediction. Did you run model setup?"
    end
    if (not model->uri.toStr.endsWith(modelConfig->data_output->exp_dir[1..-1])) do
      throw "Model " + model.dis + " directory mismatch. Did you run model setup?"
    end
    
    // Get model architecture
    // TO DO: It would be nice to load model objects directly so I don't have
    // to decipher the architecture version here...
    modelArch: modelConfig->learning_algorithm->arch_version
    if (modelArch == "alfa") do
      modelClass: "AlfaModel"
    else if (modelArch == "bravo") do
      modelClass: "BravoModel"
    else do
      throw "Unsupported model architecture version: " + arch
    end
    
    // Load model configuration
    session
      .pyDefine("model_dir", modelConfig->data_output->exp_dir)
      .pyExec("configs_path = pathlib.Path(model_dir) / 'configs.json'")
      .pyExec("""with open(configs_path, 'r', encoding='utf-8') as f:
                     configs = json.load(f)""")
    
    // Instantiate model
    session.pyExec("model = " + modelClass + "(configs)")
    
    // Determine read time span for prediction
    if (spanStart == spanEnd) do
      // Single timestep
      session
        .pyDefine("prediction_time", spanStart)
        .pyExec("prediction_time = pandas.Timestamp(prediction_time)")
        .pyExec("input_start, input_end = model.get_input_window_for_output_time(prediction_time)")  
    else do
      // Multiple timesteps
      session
        .pyDefine("first_prediction_time", spanStart)
        .pyDefine("last_prediction_time", spanEnd)
        .pyExec("first_prediction_time = pandas.Timestamp(first_prediction_time)")
        .pyExec("last_prediction_time = pandas.Timestamp(last_prediction_time)")
        .pyExec("input_start = model.get_input_window_for_output_time(first_prediction_time)[0]")
        .pyExec("input_end = model.get_input_window_for_output_time(last_prediction_time)[1]")
    end
    readSpan: session.pyEval("input_start")..session.pyEval("input_end")
    
    // Read and prepare data: see wattileReadHis()
    data: wattileReadHis(predictors, readSpan)
    
    // Get column name specification for SkySpark -> Python conversion
    getSkySparkColName: (column) => name(column)
    getPythonColName: (column) => do
      id: column.meta["id"]
      if (id == null) return null // Should only happen for "ts"
      val: predictors.find(p => id==p->id)->column
    end
    columnSpec: data
      .gridColsToDict(getSkySparkColName, getPythonColName)
      .findAll(v => v != null)
    
    // Load data into Python
    session
      .pyDefine("predictor_grid", data)
      .pyExec("predictor_data_frame = predictor_grid.to_dataframe()") // Pandas data frame
      .pyExec("predictor_data_frame = predictor_data_frame.set_index('ts')")
  
    // Rename columns
    session
      .pyDefine("column_specification", columnSpec)
      .pyExec("predictor_data_frame = predictor_data_frame.rename(columns=column_specification)")
      .pyExec("predictor_data_frame[configs['data_input']['target_var']] = -999") // Temporary; prevents dropping rows
    
    // TO DO: Should be able to remove the placeholder target var
    
    // Prep data and run prediction
    session
      .pyExec("train_df, val_df = prep_for_rnn(configs, predictor_data_frame)")
      .pyExec("results = run_model(configs, train_df, val_df)")
    
    // Return tidy results:
    //   1. Convert to Pandas series (with multi-index)
    //   2. Convert to Pandas data frame (still with multi-index)
    //   3. Convert index to data frame columns
    //   4. Add prediction timestamp as nominal timestamp + horizon
    //   5. Convert horizon to numeric in seconds
    results: session
      .pyExec("tidy_results = results.to_series().to_frame(name='pred_val').reset_index()")
      .pyExec("tidy_results['pred_ts'] = tidy_results['timestamp'] + tidy_results['horizon']")
      .pyExec("tidy_results['horizon'] = tidy_results['horizon'].map(lambda h: h.total_seconds())")
      .pyEval("tidy_results")
    
    // Add units
    results = results.map() row => do
      // Units for horizon
      row = row.set("horizon", row->horizon.as("s"))
      
      // Units for predicted values
      row = row.set("pred_val", row->pred_val.as(predUnit))
    end
    
    // Reorder columns and return results
    return results
      .reorderCols(["timestamp", "horizon", "quantile", "pred_ts", "pred_val"])
    
    // NOTE: pyEval() closses the Python session unless the session is running in a task
  end
---
name:wattilePythonModelSetup
func
overridable
src:
  (session, model) => do
    // Get local directory uri from model record
    uri: (model.toRec)["uri"]
  
    // Verify uri is a directory, exists, and is not empty
    if (uri.isNull) throw "Model must have a valid 'uri' tag"
    if (not uriIsDir(uri)) throw "Uri `" + uri.toStr + "` is not a directory"
    if (ioDir(uri).isEmpty) throw "Model directory `" + uri.toStr + "` is empty or does not exist"
    
   // Convert absolute to relative Uri
    if (uri.toStr.startsWith("/")) do
      // Verify absolute uri is for the active project
      // Convention is /proj/{projName}/io/...
      modelProj: uriPath(uri)[1]
      
      if (modelProj != context()->projName) do
        throw "Wattile model directory must be in the active project"
      end
      
      // Convert to relative Uri mounted at `io/`
      uri = uriPath(uri)[2..-1].pathToUri.uriPlusSlash
    end
    
    // Load model config in Python
    session
      .pyDefine("model_dir", "/" + uri.toStr)
      .pyExec("configs_path = pathlib.Path(model_dir) / 'configs.json'")
      .pyExec("""with open(configs_path, 'r', encoding='utf-8') as f:
                     configs = json.load(f)""")
    
    // Update configs: model directory, prediction use case
    session
      .pyExec("configs['data_output']['exp_dir'] = model_dir")
      .pyExec("configs['learning_algorithm']['use_case'] = 'prediction'")
    
    // Save configs
    session
      .pyExec("""with open(configs_path, 'w', encoding='utf-8') as f:
                     json.dump(configs, f, indent = 2)""")
    
    // Return "ok" (from Python to verify it all worked)
    session.pyEval("'ok'")
  end