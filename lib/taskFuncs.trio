name:wattilePythonTask
doc:
  Task function to handle Wattile Python Docker container interactions. Intended to be run within a dedicated persistent task by passing action messages:
  
  - 'msg' must be a dictionary with an 'action' key (Str) and any action-specific inputs as key-value pairs.
  - 'image' specifies the Docker image by name (Default = '"wattile"')
  
  Available actions are "init", "setup", "predict", and "cleanup", documented below. Each action uses a dedicated helper function.
  
  For task record configuration, see the [extension documentation]`ext-nrelWattile::doc#task`.
  
  Init
  ----
  
  Initialize a Wattile Python session. This action is only required once and is performed automatically when the session starts.
  
  - 'action': "init"
  
  Calls `wattilePythonInit()`.
  
  Setup
  -----
  
  Prepare a Wattile model for prediction. Must be run for each model before taking the "predict" action.
  
  - 'action': "setup"
  - 'model': A Wattile model record
  
  Calls `wattilePythonModelSetup()`.
  
  Predict
  -------
  
  Executes a prediction for a Wattile model.
  
  - 'action': "predict"
  - 'model': A Wattile model record
  - 'span': Time span for prediction
  
  Returns a [tidy]`https://doi.org/10.18637/jss.v059.i10` grid with columns:
  
  - *timestamp*: Nominal prediction timestamp (time corresponding to *horizon* = 0)
  - *horizon*: Time horizon of predicted value
  - *quantile*: Quantile for predicted value
  - *pred_ts*: Actual prediction timestamp; equals *timestamp* + *horizon*
  - *pred_val*: Predicted value
  
  Each row of the grid represents the value of a unique '["timestamp", "quantile", "horizon"]' tuple from the underlying Wattile output XArray.
  
  The Wattile model record(s) may have a `wattileReadOpts` tag which provides model-specific options to use when calling `wattileReadHis` in the context of model prediction.
  
  Calls `wattilePythonModelPredict()`.
  
  Cleanup
  -------
  
  Clean up prediction events and log files for a Wattile model.
  
  - 'action': "cleanup"
  - 'model': A Wattile model record
  
  Calls `wattilePythonEventCleanup()`
func
overridable
src:
  (msg, image:"wattile") => do
    // Input checking
    if (image.isStr == false) throw "'image' must be a string specifying a Docker image."
    if (msg.isDict == false) throw "'msg' must be a dictionary."
    if (msg.missing("action")) throw "'msg' dictionary must define an 'action' tag."
  
    // Get action (case-insensitive)
    action: msg->action.lower
  
    // Task progress: last action received
    taskProgress({action:action})
  
    // Initialize Python session
    pySession: py({image:image}).pyInit(wattilePythonInit)
  
    // Initialization
    if (action == "init") do
      // Nothing to do; initialization already handled above
      return "ok"
  
    // Setup
    else if (action == "setup") do
      // Model setup: see wattilePythonModelSetup()
      return pySession.wattilePythonModelSetup(msg->model)
  
    // Predict
    else if (action == "predict") do
      // Call prediction: see wattilePythonModelPredict()
      return pySession.wattilePythonModelPredict(msg->model, msg->span)
  
    // Cleanup
    else if (action == "cleanup") do
      // Event cleanup: see wattilePythonEventCleanup()
      return pySession.wattilePythonEventCleanup(msg->model)
    end
  end
