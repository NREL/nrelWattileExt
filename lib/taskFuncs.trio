name:predAnalyticsPythonTask
doc:
  Task function to handle Docker container interactions. 
  
  **TO DO:** Full documentation (not just scribbled notes)
  
  **msg** argument defines the actions to send the task; **image** specifies the Docker image to load for Python interaction.
  
  Set up the task with this function as the 'taskExpr' like this...
  
    (msg) => predAnalyticsPythonTask(msg, "name_of_image")
  
  I would have thought the following should also work, but it doesn't...
  
    predAnalyticsPythonTask(_, "name_of_image")
  
  Actions, specified via 'action' tag of **msg** as strings, are documented below.
  
  Setup
  -----
  
  Loads a model configuration in preparation for prediction
  
  - 'action': "setup"
  - 'model': Uri pointing to a trained model <- NOT USED YET
  - 'config': Dictionary containing the model configuration or Uri pointing to a JSON-encoded configuration file
  
  Predict
  -------
  
  Executes a prediction
  
  - 'action': "predict"
  - 'input': Record(s) to use for prediction input (ref, dict, list, or grid)
  - 'ts': Timestamp defining the beginning of prediction window
  - 'window': Time window used to query input history (with 'ts' as the end of the window)
  
  The contents of 'input' will be coerced to a list via `toRecList`.
  
  **TO DO:** How to handle Python data frame column names?
func
src:
  (msg, image) => do
    // Input checking
    if (image.isStr == false) throw "'image' must be a string specifying a Docker image."
    if (msg.isDict == false) throw "'msg' must be a dictionary."
    if (msg.missing("action")) throw "'msg' dictionary must define an 'action' tag."
    
    // Get action (case-insensitive)
    action: msg->action.lower
    
    // Task progress: last action received
    taskProgress({action:action})
      
    // Initialize Python session
    pySession: py({image:image}).pyInit(predAnalyticsPythonInit)
    
    // Initialization
    if (action == "init") do
      // Nothing to do; initialization already handled above
      return "ok"
    
    // Model setup
    else if (action == "setup") do
      // Load model and configuration into Python session: see predAnalyticsPythonModelSetup()
      pySession.predAnalyticsPythonModelSetup(msg->config)
      
      // Return
      return "ok"
    
    // Predict
    else if (action == "predict") do
      // Calculate span based on specified winfow
      span: (msg->ts - msg->window)..(msg->ts)
  
      // Read and prepare data: see predAnalyticsReadHis()
      data: predAnalyticsReadHis(msg->inputs, span)
  
      // Call prediction: see predAnalyticsPythonPredict()
      output: pySession.predAnalyticsPythonPredict(data, msg->inputs)
      
      // NOTE: For the moment, predAnalyticsPythonPredict() is only running prep_for_rnn
      
      // Return
      return output
    end
    
  end